[
  {
    "objectID": "reference/steps-other.html",
    "href": "reference/steps-other.html",
    "title": "Other",
    "section": "",
    "text": "Other common tabular operations",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#parameters",
    "href": "reference/steps-other.html#parameters",
    "title": "Other",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to cast.\nrequired\n\n\ndtype\nibis.expr.datatypes.ibis.expr.datatypes.DataType | type[ibis.expr.datatypes.ibis.expr.datatypes.DataType] | str\nThe dtype to cast to. May be a dtype instance, class, or a string representation of one.\nrequired",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#examples",
    "href": "reference/steps-other.html#examples",
    "title": "Other",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nCast all numeric columns to float64\n&gt;&gt;&gt; step = ml.Cast(ml.numeric(), \"float64\")\nCast specific columns to int64 by name\n&gt;&gt;&gt; step = ml.Cast([\"x\", \"y\"], \"int64\")",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#parameters-1",
    "href": "reference/steps-other.html#parameters-1",
    "title": "Other",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to drop.\nrequired",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#examples-1",
    "href": "reference/steps-other.html#examples-1",
    "title": "Other",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nDrop all non-numeric columns\n&gt;&gt;&gt; step = ml.Drop(~ml.numeric())\nDrop specific columns by name\n&gt;&gt;&gt; step = ml.Drop([\"x\", \"y\"])",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#parameters-2",
    "href": "reference/steps-other.html#parameters-2",
    "title": "Other",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to use as inputs to expr/named_exprs.\nrequired\n\n\nexpr\ntyping.Callable[[ibis.expr.types.ibis.expr.types.Column], ibis.expr.types.ibis.expr.types.Column] | ibis.common.deferred.Deferred | None\nAn optional callable (Column -&gt; Column) or deferred expression to apply to all columns in inputs. Output columns will have the same name as their respective inputs (effectively replacing them in the output table).\nNone\n\n\nnamed_exprs\ntyping.Callable[[ibis.expr.types.ibis.expr.types.Column], ibis.expr.types.ibis.expr.types.Column] | ibis.common.deferred.Deferred\nNamed callables (Column -&gt; Column) or deferred expressions to apply to all columns in inputs. Output columns will be named {column}_{name} where column is the input column name and name is the expression/callable name.\n{}",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#examples-2",
    "href": "reference/steps-other.html#examples-2",
    "title": "Other",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\n&gt;&gt;&gt; from ibis import _\nReplace all numeric columns with their absolute values.\n&gt;&gt;&gt; step = ml.MutateAt(ml.numeric(), _.abs())\nSame as the above, but instead create new columns with _abs suffixes.\n&gt;&gt;&gt; step = ml.MutateAt(ml.numeric(), abs=_.abs())",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#parameters-3",
    "href": "reference/steps-other.html#parameters-3",
    "title": "Other",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nexprs\ntyping.Callable[[ibis.expr.types.ibis.expr.types.Table], ibis.expr.types.ibis.expr.types.Column] | ibis.common.deferred.Deferred\nCallables (Table -&gt; Column) or deferred expressions to use to define new columns in the output table.\n()\n\n\nnamed_exprs\ntyping.Callable[[ibis.expr.types.ibis.expr.types.Table], ibis.expr.types.ibis.expr.types.Column] | ibis.common.deferred.Deferred\nNamed callables (Table -&gt; Column) or deferred expressions to use to define new columns in the output table.\n{}",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-other.html#examples-3",
    "href": "reference/steps-other.html#examples-3",
    "title": "Other",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\n&gt;&gt;&gt; from ibis import _\nDefine a new column c as a**2 + b**2\n&gt;&gt;&gt; step = ml.Mutate(c=_.a**2 + _.b**2)",
    "crumbs": [
      "Steps",
      "Other"
    ]
  },
  {
    "objectID": "reference/steps-feature-engineering.html",
    "href": "reference/steps-feature-engineering.html",
    "title": "Feature engineering",
    "section": "",
    "text": "Generating new features",
    "crumbs": [
      "Steps",
      "Feature engineering"
    ]
  },
  {
    "objectID": "reference/steps-feature-engineering.html#parameters",
    "href": "reference/steps-feature-engineering.html#parameters",
    "title": "Feature engineering",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to generate polynomial features. All columns must be numeric.\nrequired\n\n\ndegree\nint\nThe maximum degree of polynomial features to generate.\n2",
    "crumbs": [
      "Steps",
      "Feature engineering"
    ]
  },
  {
    "objectID": "reference/steps-feature-engineering.html#examples",
    "href": "reference/steps-feature-engineering.html#examples",
    "title": "Feature engineering",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nGenerate polynomial features for all numeric columns with a degree is 2.\n&gt;&gt;&gt; step = ml.PolynomialFeatures(ml.numeric(), degree=2)\nGenerate polynomial features a specific set of columns.\n&gt;&gt;&gt; step = ml.PolynomialFeatures([\"x\", \"y\"], degree=2)",
    "crumbs": [
      "Steps",
      "Feature engineering"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html",
    "href": "reference/steps-encoding.html",
    "title": "Encoding",
    "section": "",
    "text": "Encoding of categorical and string columns",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#parameters",
    "href": "reference/steps-encoding.html#parameters",
    "title": "Encoding",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to one-hot encode.\nrequired\n\n\nmin_frequency\nint | float | None\nA minimum frequency of elements in the training set required to treat a column as a distinct category. May be either: - an integer, representing a minimum number of samples required. - a float in [0, 1], representing a minimum fraction of samples required. Defaults to None for no minimum frequency.\nNone\n\n\nmax_categories\nint | None\nA maximum number of categories to include. If set, only the most frequent max_categories categories are kept.\nNone",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#examples",
    "href": "reference/steps-encoding.html#examples",
    "title": "Encoding",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nOne-hot encode all string columns.\n&gt;&gt;&gt; step = ml.OneHotEncode(ml.string())\nOne-hot encode a specific column, only including categories with at least 20 samples.\n&gt;&gt;&gt; step = ml.OneHotEncode(\"x\", min_frequency=20)\nOne-hot encode a specific column, including at most 10 categories.\n&gt;&gt;&gt; step = ml.OneHotEncode(\"x\", max_categories=10)",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#parameters-1",
    "href": "reference/steps-encoding.html#parameters-1",
    "title": "Encoding",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to categorical encode.\nrequired\n\n\nmin_frequency\nint | float | None\nA minimum frequency of elements in the training set required to treat a column as a distinct category. May be either: - an integer, representing a minimum number of samples required. - a float in [0, 1], representing a minimum fraction of samples required. Defaults to None for no minimum frequency.\nNone\n\n\nmax_categories\nint | None\nA maximum number of categories to include. If set, only the most frequent max_categories categories are kept.\nNone",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#examples-1",
    "href": "reference/steps-encoding.html#examples-1",
    "title": "Encoding",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nCategorical encode all string columns.\n&gt;&gt;&gt; step = ml.CategoricalEncode(ml.string())\nCategorical encode a specific column, only including categories with at least 20 samples.\n&gt;&gt;&gt; step = ml.CategoricalEncode(\"x\", min_frequency=20)\nCategorical encode a specific column, including at most 10 categories.\n&gt;&gt;&gt; step = ml.CategoricalEncode(\"x\", max_categories=10)",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#parameters-2",
    "href": "reference/steps-encoding.html#parameters-2",
    "title": "Encoding",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to count encode.\nrequired",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#examples-2",
    "href": "reference/steps-encoding.html#examples-2",
    "title": "Encoding",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nCount encode all string columns.\n&gt;&gt;&gt; step = ml.CountEncode(ml.string())",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#parameters-3",
    "href": "reference/steps-encoding.html#parameters-3",
    "title": "Encoding",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to target encode.\nrequired\n\n\nsmooth\nfloat\nThe amount of mixing of the target mean conditioned on the value of the category with the global target mean. A larger smooth value will put more weight on the global target mean.\n0.0",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/steps-encoding.html#examples-3",
    "href": "reference/steps-encoding.html#examples-3",
    "title": "Encoding",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nTarget encode all string columns.\n&gt;&gt;&gt; step = ml.TargetEncode(ml.string())",
    "crumbs": [
      "Steps",
      "Encoding"
    ]
  },
  {
    "objectID": "reference/selectors.html",
    "href": "reference/selectors.html",
    "title": "Selectors",
    "section": "",
    "text": "Select sets of columns by name, type, or other properties",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters",
    "href": "reference/selectors.html#parameters",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\nstr\nNames of the columns to select.\n()",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters-1",
    "href": "reference/selectors.html#parameters-1",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npattern\nstr\nThe string to search for in column names.\nrequired",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters-2",
    "href": "reference/selectors.html#parameters-2",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsuffix\nstr\nThe column name suffix to match.\nrequired",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters-3",
    "href": "reference/selectors.html#parameters-3",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprefix\nstr\nThe column name prefix to match.\nrequired",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters-4",
    "href": "reference/selectors.html#parameters-4",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npattern\nstr\nThe pattern to search for in column names.\nrequired",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters-5",
    "href": "reference/selectors.html#parameters-5",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndtype\nibis.expr.datatypes.ibis.expr.datatypes.DataType | str | type[ibis.expr.datatypes.ibis.expr.datatypes.DataType]\nThe dtype to match. May be a dtype instance, string, or dtype class.\nrequired",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/selectors.html#parameters-6",
    "href": "reference/selectors.html#parameters-6",
    "title": "Selectors",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredicate\ntyping.Callable[[ibis.expr.types.ibis.expr.types.Column], bool]\nA predicate function from Column to bool. Only columns where predicate returns True will be selected.\nrequired",
    "crumbs": [
      "Core API",
      "Selectors"
    ]
  },
  {
    "objectID": "reference/core.html",
    "href": "reference/core.html",
    "title": "Common",
    "section": "",
    "text": "Common\nCore APIs\n\n\nRecipe\nRecipe(self, *steps)\n\n\n\n\n Back to top",
    "crumbs": [
      "Core API",
      "Common"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html",
    "href": "reference/steps-temporal.html",
    "title": "Temporal",
    "section": "",
    "text": "Feature extraction for temporal columns",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html#parameters",
    "href": "reference/steps-temporal.html#parameters",
    "title": "Temporal",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of date and time columns to expand into new features.\nrequired\n\n\ncomponents\nlist[typing.Literal[‘day’, ‘week’, ‘month’, ‘year’, ‘dow’, ‘doy’, ‘hour’, ‘minute’, ‘second’, ‘millisecond’]]\nA sequence of date or time components to expand. Options include - day: the day of the month as a numeric value - week: the week of the year as a numeric value - month: the month of the year as a categorical value - year: the year as a numeric value - dow: the day of the week as a categorical value - doy: the day of the year as a numeric value - hour: the hour as a numeric value - minute: the minute as a numeric value - second: the second as a numeric value - millisecond: the millisecond as a numeric value Defaults to [\"dow\", \"month\", \"year\", \"hour\", \"minute\", \"second\"].\n('dow', 'month', 'year', 'hour', 'minute', 'second')",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html#examples",
    "href": "reference/steps-temporal.html#examples",
    "title": "Temporal",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nExpand date and time columns using the default components\n&gt;&gt;&gt; step = ml.ExpandDateTime(ml.datetime())\nExpand specific columns using specific components for date and time\n&gt;&gt;&gt; step = ml.ExpandDateTime([\"x\", \"y\"], [\"day\", \"year\", \"hour\"])",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html#parameters-1",
    "href": "reference/steps-temporal.html#parameters-1",
    "title": "Temporal",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of date columns to expand into new features.\nrequired\n\n\ncomponents\ntyping.Sequence[typing.Literal[‘day’, ‘week’, ‘month’, ‘year’, ‘dow’, ‘doy’]]\nA sequence of components to expand. Options include - day: the day of the month as a numeric value - week: the week of the year as a numeric value - month: the month of the year as a categorical value - year: the year as a numeric value - dow: the day of the week as a categorical value - doy: the day of the year as a numeric value Defaults to [\"dow\", \"month\", \"year\"].\n('dow', 'month', 'year')",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html#examples-1",
    "href": "reference/steps-temporal.html#examples-1",
    "title": "Temporal",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nExpand date columns using the default components\n&gt;&gt;&gt; step = ml.ExpandDate(ml.date())\nExpand specific columns using specific components\n&gt;&gt;&gt; step = ml.ExpandDate([\"x\", \"y\"], [\"day\", \"year\"])",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html#parameters-2",
    "href": "reference/steps-temporal.html#parameters-2",
    "title": "Temporal",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of time columns to expand into new features.\nrequired\n\n\ncomponents\ntyping.Sequence[typing.Literal[‘hour’, ‘minute’, ‘second’, ‘millisecond’]]\nA sequence of components to expand. Options include hour, minute, second, and millisecond. Defaults to [\"hour\", \"minute\", \"second\"].\n('hour', 'minute', 'second')",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "reference/steps-temporal.html#examples-2",
    "href": "reference/steps-temporal.html#examples-2",
    "title": "Temporal",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nExpand time columns using the default components\n&gt;&gt;&gt; step = ml.ExpandTime(ml.time())\nExpand specific columns using specific components\n&gt;&gt;&gt; step = ml.ExpandTime([\"x\", \"y\"], [\"hour\", \"minute\"])",
    "crumbs": [
      "Steps",
      "Temporal"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to IbisML",
    "section": "",
    "text": "A library for building scalable ML pipelines\n\nPreprocess your data at scale on any Ibis-supported backend.\nCompose Recipes with other scikit-learn estimators using Pipelines.\nSeamlessly integrate with scikit-learn, XGBoost, and PyTorch models.\n\n\n\nGet started\n\nInstall IbisML\npip install ibisml\n\n\nCreate your first recipe\nWith recipes, you can define sequences of feature engineering steps to get your data ready for modeling. For example, create a recipe to replace missing values using the mean of each numeric column and then normalize numeric data to have a standard deviation of one and a mean of zero.\n\nimport ibisml as ml\n\nimputer = ml.ImputeMean(ml.numeric())\nscaler = ml.ScaleStandard(ml.numeric())\nrec = ml.Recipe(imputer, scaler)\n\nA recipe can be chained in a Pipeline like any other transformer.\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\n\npipe = Pipeline([(\"rec\", rec), (\"svc\", SVC())])\n\nThe pipeline can be used as any other estimator and avoids leaking the test set into the train set.\n\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\nX, y = make_classification(random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\npipe.fit(X_train, y_train).score(X_test, y_test)\n\n0.88\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "reference/steps-standardization.html",
    "href": "reference/steps-standardization.html",
    "title": "Standardization",
    "section": "",
    "text": "Standardization and normalization of numeric columns",
    "crumbs": [
      "Steps",
      "Standardization"
    ]
  },
  {
    "objectID": "reference/steps-standardization.html#parameters",
    "href": "reference/steps-standardization.html#parameters",
    "title": "Standardization",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to normalize. All columns must be numeric.\nrequired",
    "crumbs": [
      "Steps",
      "Standardization"
    ]
  },
  {
    "objectID": "reference/steps-standardization.html#examples",
    "href": "reference/steps-standardization.html#examples",
    "title": "Standardization",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nNormalize all numeric columns.\n&gt;&gt;&gt; step = ml.ScaleStandard(ml.numeric())\nNormalize a specific set of columns.\n&gt;&gt;&gt; step = ml.ScaleStandard([\"x\", \"y\"])",
    "crumbs": [
      "Steps",
      "Standardization"
    ]
  },
  {
    "objectID": "reference/steps-feature-selection.html",
    "href": "reference/steps-feature-selection.html",
    "title": "Feature selection",
    "section": "",
    "text": "Selecting useful features for modeling",
    "crumbs": [
      "Steps",
      "Feature selection"
    ]
  },
  {
    "objectID": "reference/steps-feature-selection.html#parameters",
    "href": "reference/steps-feature-selection.html#parameters",
    "title": "Feature selection",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to analyze for zero variance.\nrequired\n\n\ntolerance\nint | float\nTolerance level for considering variance as zero. Columns with variance less than this tolerance will be removed. Default is 1e-4.\n0.0001",
    "crumbs": [
      "Steps",
      "Feature selection"
    ]
  },
  {
    "objectID": "reference/steps-feature-selection.html#examples",
    "href": "reference/steps-feature-selection.html#examples",
    "title": "Feature selection",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nTo remove columns with zero variance:\n&gt;&gt;&gt; step = ml.ZeroVariance(ml.everything())\nTo remove all numeric columns with zero variance:\n&gt;&gt;&gt; step = ml.ZeroVariance(ml.numeric())\nTo remove all string or categorical columns with only one unique value:\n&gt;&gt;&gt; step = ml.ZeroVariance(ml.nominal())",
    "crumbs": [
      "Steps",
      "Feature selection"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html",
    "href": "reference/steps-imputation.html",
    "title": "Imputation",
    "section": "",
    "text": "Imputation and handling of missing values",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#parameters",
    "href": "reference/steps-imputation.html#parameters",
    "title": "Imputation",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to impute. All columns must be numeric.\nrequired",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#examples",
    "href": "reference/steps-imputation.html#examples",
    "title": "Imputation",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nReplace NULL values in all numeric columns with their respective means, computed from the training dataset.\n&gt;&gt;&gt; step = ml.ImputeMean(ml.numeric())",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#parameters-1",
    "href": "reference/steps-imputation.html#parameters-1",
    "title": "Imputation",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to impute.\nrequired",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#examples-1",
    "href": "reference/steps-imputation.html#examples-1",
    "title": "Imputation",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nReplace NULL values in all numeric columns with their respective modes, computed from the training dataset.\n&gt;&gt;&gt; step = ml.ImputeMode(ml.numeric())",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#parameters-2",
    "href": "reference/steps-imputation.html#parameters-2",
    "title": "Imputation",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to impute. All columns must be numeric.\nrequired",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#examples-2",
    "href": "reference/steps-imputation.html#examples-2",
    "title": "Imputation",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nReplace NULL values in all numeric columns with their respective medians, computed from the training dataset.\n&gt;&gt;&gt; step = ml.ImputeMedian(ml.numeric())",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#parameters-3",
    "href": "reference/steps-imputation.html#parameters-3",
    "title": "Imputation",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to fillna.\nrequired\n\n\nfill_value\ntyping.Any\nThe fill value to use. Must be castable to the dtype of all columns in inputs.\nrequired",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/steps-imputation.html#examples-3",
    "href": "reference/steps-imputation.html#examples-3",
    "title": "Imputation",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibisml as ml\nFill all NULL values in numeric columns with 0.\n&gt;&gt;&gt; step = ml.FillNA(ml.numeric(), 0)\nFill all NULL values in specific columns with 1.\n&gt;&gt;&gt; step = ml.FillNA([\"x\", \"y\"], 1)",
    "crumbs": [
      "Steps",
      "Imputation"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Common\nCore APIs\n\n\nSelectors\nSelect sets of columns by name, type, or other properties\n\n\n\n\n\n\nDefine steps in a recipe\n\n\n\nImputation\nImputation and handling of missing values\n\n\nEncoding\nEncoding of categorical and string columns\n\n\nStandardization\nStandardization and normalization of numeric columns\n\n\nDiscretization\nDiscretization of numeric columns\n\n\nFeature selection\nSelecting useful features for modeling\n\n\nFeature engineering\nGenerating new features\n\n\nTemporal\nFeature extraction for temporal columns\n\n\nOther\nOther common tabular operations"
  },
  {
    "objectID": "reference/index.html#core",
    "href": "reference/index.html#core",
    "title": "Reference",
    "section": "",
    "text": "Common\nCore APIs\n\n\nSelectors\nSelect sets of columns by name, type, or other properties"
  },
  {
    "objectID": "reference/index.html#steps",
    "href": "reference/index.html#steps",
    "title": "Reference",
    "section": "",
    "text": "Define steps in a recipe\n\n\n\nImputation\nImputation and handling of missing values\n\n\nEncoding\nEncoding of categorical and string columns\n\n\nStandardization\nStandardization and normalization of numeric columns\n\n\nDiscretization\nDiscretization of numeric columns\n\n\nFeature selection\nSelecting useful features for modeling\n\n\nFeature engineering\nGenerating new features\n\n\nTemporal\nFeature extraction for temporal columns\n\n\nOther\nOther common tabular operations"
  },
  {
    "objectID": "reference/steps-discretization.html",
    "href": "reference/steps-discretization.html",
    "title": "Discretization",
    "section": "",
    "text": "Discretization of numeric columns",
    "crumbs": [
      "Steps",
      "Discretization"
    ]
  },
  {
    "objectID": "reference/steps-discretization.html#parameters",
    "href": "reference/steps-discretization.html#parameters",
    "title": "Discretization",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninputs\nibisml.select.SelectionType\nA selection of columns to bin.\nrequired\n\n\nn_bins\nint\nNumber of bins to create.\n5\n\n\nstrategy\n(str, {‘uniform’, ‘quantile’})\nStrategy used to define the bin edges. - ‘uniform’: Evenly spaced bins between the minimum and maximum values. - ‘quantile’: Bins are created based on data quantiles.\n'uniform'",
    "crumbs": [
      "Steps",
      "Discretization"
    ]
  },
  {
    "objectID": "reference/steps-discretization.html#raises",
    "href": "reference/steps-discretization.html#raises",
    "title": "Discretization",
    "section": "Raises",
    "text": "Raises\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf n_bins is less than or equal to 1 or if an unsupported strategy is provided.",
    "crumbs": [
      "Steps",
      "Discretization"
    ]
  },
  {
    "objectID": "reference/steps-discretization.html#examples",
    "href": "reference/steps-discretization.html#examples",
    "title": "Discretization",
    "section": "Examples",
    "text": "Examples\n&gt;&gt;&gt; import ibis\n&gt;&gt;&gt; import ibisml as ml\n&gt;&gt;&gt; from ibisml.core import Metadata\n&gt;&gt;&gt; ibis.options.interactive = True\nLoad penguins dataset\n&gt;&gt;&gt; p = ibis.examples.penguins.fetch()\nBin all numeric columns.\n&gt;&gt;&gt; step = ml.DiscretizeKBins(ml.numeric(), n_bins=10)\n&gt;&gt;&gt; step.fit_table(p, Metadata())\n&gt;&gt;&gt; step.transform_table(p)\nBin specific numeric columns.\n&gt;&gt;&gt; step = ml.DiscretizeKBins([\"bill_length_mm\"], strategy=\"quantile\")\n&gt;&gt;&gt; step.fit_table(p, Metadata())\n&gt;&gt;&gt; step.transform_table(p)",
    "crumbs": [
      "Steps",
      "Discretization"
    ]
  }
]