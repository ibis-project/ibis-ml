---
title: "Transformation support matrix"
format: dashboard
hide:
  - toc
---

## {height=25%}

::: {.card title="Welcome to the transformation support matrix!"}

This is a Quarto dashboard that shows
the IbisML transformations each backend supports.

::: {.callout}
Due to differences in SQL dialects and upstream support for different
operations in different backends, support for the full breadth of the IbisML transfromations
varies:

1. ✅ Fully supported
2. 🚫 Not supported
3. 🟡 Partial support (hover over for more information)
4. 🔍 Support varies by operation or data type across different backends (check [operation support matrix](https://ibis-project.org/support_matrix) for details)

:::
:::


### {width=25%}

```{python}
#| content: valuebox
#| title: "Number of backends"
import ibis

dict(
    value=len(ibis.util.backend_entry_points()),
    color="info",
    icon="signpost-split-fill",
)
```

### {width=25%}

```{python}
#| content: valuebox
#| title: "Number of SQL backends"
import importlib
from ibis.backends.sql import SQLBackend

# had an issue in the code, It could be python and dask compatibility.
# sql_backends = sum(
#     issubclass(
#         getattr(importlib.import_module(f"ibis.backends.{entry_point.name}"), "Backend", None),
#         SQLBackend
#     )
#     for entry_point in ibis.util.backend_entry_points()
# )
# assert sql_backends > 0
dict(value=len(ibis.util.backend_entry_points()) - 3, color="green", icon="database")
```

## {height=70%}

```{python}
from itables import show
from support_matrix import make_support_matrix
import re


matrix = make_support_matrix()

def custom_replace(value):
    if value is True:
        return "✅"
    elif value is False:
        return "🚫"
    elif value == "backend-specific":
        return "<span title='check backend-specific support'>🔍</span>"
    else:
        return f"<span title='Support: {value}'>🟡</span>"

show(
    matrix.applymap(custom_replace),
    ordering=False,
    paging=False,
    buttons=["copy", "excel", "csv"],
)
```